from aiogram import types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from app.create_bot import dp, bot
from app.states import UserFollowing


@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    buttons = [
        KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å"),
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    await UserFollowing.start_navigation.set()
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ <b>Polyhedra Automatization</b> ! ü§ñüëã \n\n"
                         ""
                         "–ë–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ–Ω—Ç:\n\n"
                         ""
                         "<u> 1. –ú–∏–Ω—Ç nft (loyalty): </u> \n"
                         "  üîò <i> Greenfield Testnet </i> (–Ω–∞ BNB Chain) \n"
                         "  üîò <i> ZkLightClient </i> (–Ω–∞ BNB Chain) \n"
                         "  üîò <i> ZkBridge on opBNB </i> (–Ω–∞ BNB Chain) \n"
                         "  üîò <i> Mainnet Alpha </i> (–Ω–∞ Core) \n"
                         "  üîò <i> Pandra </i> (–Ω–∞ BNB Chain, Polygon, Core, Celo) \n\n"
                         "<u> 2. –ö—Ä–æ—Å—Å—á–µ–π–Ω nft —Å–µ–Ω–¥–µ—Ä (zknft): </u> \n"
                         '  üîò <i> ZkLightClient nft </i> –∏–∑ BSC –≤ opBNB \n'
                         '  üîò <i> ZkBridge on opBNB nft </i> –∏–∑ BSC –≤ opBNB \n'
                         '  üîò <i> Mainnet Alpha nft </i> –∏–∑ Core –≤ Polygon \n'
                         '  üîò <i> CodeConqueror (Pandra) nft </i> –∏–∑ BSC –≤ Core \n'
                         '  üîò <i> PixelProwler (Pandra) nft </i> –∏–∑ Polygon –≤ BSC \n'
                         '  üîò <i> MelodyMaven (Pandra) nft </i> –∏–∑ Core –≤ Polygon \n'
                         '  üîò <i> EcoGuardian (Pandra) nft </i> –∏–∑ Celo –≤ BSC \n\n'
                         '<u> 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (zkMessenger): </u> \n'
                         '  üîò <i> –∏–∑ BSC –≤ Polygon </i> \n\n'
                         ''
                         '<i> - –ß—Ç–æ–±—ã —Å–º–∏–Ω—Ç–∏—Ç—å –≤ —Å–µ—Ç–∏ Core –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–∫–∏–Ω—É—Ç—å –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º –Ω–µ–º–Ω–æ–≥–æ core \n'
                         ' - –¢–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º –≥–∞–∑ –≤ opBNB </i>',
                         parse_mode=types.ParseMode.HTML,
                         reply_markup=reply_markup)


@dp.message_handler(Text(equals="üöÄ –ù–∞—á–∞—Ç—å"), state=UserFollowing.start_navigation)
async def request_wallets(message: types.Message):
    await UserFollowing.ask_wallet.set()
    await message.answer("üëù *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫* \n\n"
                         "_–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—à–µ–ª—å–∫–æ–≤, —Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∫–æ—à–µ–ª—å–∫–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ_",
                         parse_mode=types.ParseMode.MARKDOWN,
                         reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=UserFollowing.ask_wallet)
async def send_wallet_stats(message: types.Message):
    user_wallets = message.text

    wait_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∫–æ—à–µ–ª—å–∫–∏...", reply_markup=ReplyKeyboardRemove())

    if '\n' in user_wallets:
        lst_user_wallets = user_wallets.split('\n')
        for i in range(len(lst_user_wallets)):
            lst_user_wallets[i].strip()
            if len(lst_user_wallets[i]) != 42:
                error_message = f" –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ª–∏–±–æ –æ—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ #{i + 1})"

                buttons = [
                    KeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"),
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard=[buttons],
                                                   resize_keyboard=True)

                await bot.delete_message(chat_id=wait_message.chat.id,
                                         message_id=wait_message.message_id)
                await message.answer(error_message, parse_mode=types.ParseMode.MARKDOWN,
                                     reply_markup=reply_markup)
                return
        lst_user_wallets = list(set(lst_user_wallets))
        await bot.delete_message(chat_id=wait_message.chat.id,
                                 message_id=wait_message.message_id)
        success_message = await message.answer(f" _–ü–æ–ª—É—á–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(lst_user_wallets)}_",
                                               parse_mode=types.ParseMode.MARKDOWN)
    else:
        user_wallet = user_wallets.strip()

        if len(user_wallet) != 42:
            error_message = f" –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞"

            buttons = [
                KeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"),
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard=[buttons],
                                               resize_keyboard=True)

            await bot.delete_message(chat_id=wait_message.chat.id,
                                     message_id=wait_message.message_id)
            await message.answer(error_message, parse_mode=types.ParseMode.MARKDOWN,
                                 reply_markup=reply_markup)
            return
        await bot.delete_message(chat_id=wait_message.chat.id,
                                 message_id=wait_message.message_id)
        lst_user_wallets = [user_wallet]
        success_message = await message.answer(f" _–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω_", parse_mode=types.ParseMode.MARKDOWN)

    wait_1_message = await message.answer("‚è≥ –ì–æ—Ç–æ–≤–ª—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    response_message = ""

