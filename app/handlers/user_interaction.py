import asyncio

from aiogram import types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from app.create_bot import dp, bot
from app.states import UserFollowing
from app.utils import Bridger, Messager, Minter


@dp.message_handler(Text(equals=["‚ùå –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"]), state='*')
async def finish_get_stat(message: types.Message, state: FSMContext):
    await state.finish()
    await UserFollowing.start_navigation.set()
    await request_wallets(message)


@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    buttons = [
        KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å"),
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    await UserFollowing.start_navigation.set()
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ <b>Polyhedra Automatization</b> ! ü§ñüëã \n\n"
                         ""
                         "–ë–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ–Ω—Ç:\n\n"
                         ""
                         "<u> 1. –ú–∏–Ω—Ç nft (loyalty): </u> \n"
                         "  üîò <i> Greenfield Testnet </i> (–Ω–∞ BNB Chain) \n"
                         "  üîò <i> ZkLightClient </i> (–Ω–∞ BNB Chain) \n"
                         "  üîò <i> ZkBridge on opBNB </i> (–Ω–∞ BNB Chain) \n"
                         "  üîò <i> Mainnet Alpha </i> (–Ω–∞ Core) \n"
                         "  üîò <i> Pandra </i> (–Ω–∞ BNB Chain, Polygon, Core, Celo) \n\n"
                         "<u> 2. –ö—Ä–æ—Å—Å—á–µ–π–Ω nft —Å–µ–Ω–¥–µ—Ä (zknft): </u> \n"
                         '  üîò <i> ZkLightClient nft </i> –∏–∑ BSC –≤ opBNB \n'
                         '  üîò <i> ZkBridge on opBNB nft </i> –∏–∑ BSC –≤ opBNB \n'
                         '  üîò <i> Mainnet Alpha nft </i> –∏–∑ Core –≤ Polygon \n'
                         '  üîò <i> CodeConqueror (Pandra) nft </i> –∏–∑ BSC –≤ Core \n'
                         '  üîò <i> PixelProwler (Pandra) nft </i> –∏–∑ Polygon –≤ BSC \n'
                         '  üîò <i> MelodyMaven (Pandra) nft </i> –∏–∑ Core –≤ Polygon \n'
                         '  üîò <i> EcoGuardian (Pandra) nft </i> –∏–∑ Celo –≤ BSC \n\n'
                         '<u> 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (zkMessenger): </u> \n'
                         '  üîò <i> –∏–∑ BSC –≤ Polygon </i> \n\n'
                         ''
                         '<i> - –ß—Ç–æ–±—ã —Å–º–∏–Ω—Ç–∏—Ç—å –≤ —Å–µ—Ç–∏ Core –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–∫–∏–Ω—É—Ç—å –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º –Ω–µ–º–Ω–æ–≥–æ core \n'
                         ' - –¢–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º –≥–∞–∑ –≤ opBNB </i>',
                         parse_mode=types.ParseMode.HTML,
                         reply_markup=reply_markup)


@dp.message_handler(Text(equals="üöÄ –ù–∞—á–∞—Ç—å"), state=UserFollowing.start_navigation)
async def request_private_key(message: types.Message):
    await UserFollowing.send_API.set()
    await message.answer("üëù *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π private key* \n\n"
                         "_–ë–æ—Ç –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –í–∞—à–∏ –∫–ª—é—á–∏. –ü—Ä–æ–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é OpenSource \n"
                         "GitHub: _",
                         parse_mode=types.ParseMode.MARKDOWN,
                         reply_markup=ReplyKeyboardRemove())

@dp.message_handler(Text(equals="üöÄ –ù–∞—á–∞—Ç—å"), state=UserFollowing.send_API)
async def request_API(message: types.Message, state: FSMContext):
    wait_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é private key...", reply_markup=ReplyKeyboardRemove())
    private_key = message.text.strip()
    await state.update_data(private_key=private_key)
    await bot.delete_message(chat_id=wait_message.chat.id,
                             message_id=wait_message.message_id)
    await UserFollowing.wallet_menu.set()
    await message.answer("üëù *–û—Ç–ø—Ä–∞–≤—å—Ç–µ API* \n\n"
                         "_ –¢—É—Ç–æ—Ä _",
                         parse_mode=types.ParseMode.MARKDOWN,
                         reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=UserFollowing.wallet_menu)
async def send_menu(message: types.Message, state: FSMContext):
    api_key = message.text.strip()
    await state.update_data(api_key=api_key)

    data = await state.get_data()
    private_key = data.get("private_key")

    b1 = KeyboardButton("üí∞ –ó–∞–∫–ª–µ–π–º–∏—Ç—å –≤—Å—ë")
    b2 = KeyboardButton("‚õè –ú–∏–Ω—Ç nft")
    b3 = KeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    b4 = KeyboardButton("üí∏ –ö—Ä–æ—Å—Å—á–µ–π–Ω nft —Å–µ–Ω–¥–µ—Ä")
    buttons = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons.row(b1, b2).row(b3, b4)

    await UserFollowing.wallet_menu.set()
    await message.answer(f"# Private key *{private_key[0:6]}...{private_key[-4:]}* \n"
                         f"# API key *{api_key[0:6]}...{api_key[-4:]}*\n\n"
                         f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode=types.ParseMode.MARKDOWN,
                         reply_markup=buttons)


@dp.message_handler(Text(equals="üí∞ –ó–∞–∫–ª–µ–π–º–∏—Ç—å –≤—Å—ë"), state=UserFollowing.wallet_menu)
async def claim_all(message: types.Message, state: FSMContext):
    wait_1_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –∫–ª–µ–π–º ...")

    data = await state.get_data()
    private_key = data.get("private_key")
    api_key = data.get("api_key")

    await bot.edit_message_text(chat_id=wait_1_message.chat.id,
                                message_id=wait_1_message.message_id,
                                text=f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ ...")

    is_sending = Messager.messsage(private_key)
    if is_sending == -2:
        is_sending = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–∞–∑–∞"
    elif is_sending == -6:
        is_sending = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    await asyncio.sleep(5)
    await bot.edit_message_text(chat_id=wait_1_message.chat.id,
                                message_id=wait_1_message.message_id,
                                text=f"‚è≥ –ù–∞—á–∏–Ω–∞—é mint nft 0/8")

    greenfield_minter = Minter(private_key, 'bsc', 'Greenfield Testnet')
    is_gr_mint = greenfield_minter.mint()
    if is_gr_mint == -2:
        is_gr_mint = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–∞–∑–∞"
    elif is_gr_mint == -6:
        is_gr_mint = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    await asyncio.sleep(6)
    await bot.edit_message_text(chat_id=wait_1_message.chat.id,
                                message_id=wait_1_message.message_id,
                                text=f"‚è≥ mint nft 1/8")

    zklight_minter = Minter(private_key, 'bsc', 'ZkLightClient')
    is_zklight_mint = zklight_minter.mint()
    if is_zklight_mint == -2:
        is_zklight_mint = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–∞–∑–∞"
    elif is_zklight_mint == -6:
        is_zklight_mint = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    await asyncio.sleep(4)
    await bot.edit_message_text(chat_id=wait_1_message.chat.id,
                                message_id=wait_1_message.message_id,
                                text=f"‚è≥ mint nft 2/8")

    opbnb_minter = Minter(private_key, 'bsc', 'ZkBridge on opBNB')
    is_opbnb_mint = opbnb_minter.mint()
    if is_opbnb_mint == -2:
        is_opbnb_mint = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–∞–∑–∞"
    elif is_opbnb_mint == -6:
        is_opbnb_mint = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    await asyncio.sleep(5)
    await bot.edit_message_text(chat_id=wait_1_message.chat.id,
                                message_id=wait_1_message.message_id,
                                text=f"‚è≥ mint nft 3/8")

    mainnetalpha_minter = Minter(private_key, 'core', 'Mainnet Alpha')
    is_main_mint = mainnetalpha_minter.mint()
    if is_main_mint == -2:
        is_main_mint = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–∞–∑–∞"
    elif is_main_mint == -6:
        is_main_mint = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    await asyncio.sleep(3)
    await bot.edit_message_text(chat_id=wait_1_message.chat.id,
                                message_id=wait_1_message.message_id,
                                text=f"‚è≥ mint nft 4/8")

    pandra_bnb_minter = Minter(private_key, 'bsc', 'Pandra')
    is_pandra_bnb_mint = pandra_bnb_minter.mint()
    if is_pandra_bnb_mint == -2:
        is_pandra_bnb_mint = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–∞–∑–∞"
    elif is_pandra_bnb_mint == -6:
        is_pandra_bnb_mint = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    await asyncio.sleep(5)
    await bot.edit_message_text(chat_id=wait_1_message.chat.id,
                                message_id=wait_1_message.message_id,
                                text=f"‚è≥ mint nft 5/8")

    pandra_pol_minter = Minter(private_key, 'polygon', 'Pandra')
    is_pandra_pol_mint = pandra_pol_minter.mint()
    if is_pandra_pol_mint == -2:
        is_pandra_pol_mint = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–∞–∑–∞"
    elif is_pandra_pol_mint == -6:
        is_pandra_pol_mint = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    await asyncio.sleep(7)
    await bot.edit_message_text(chat_id=wait_1_message.chat.id,
                                message_id=wait_1_message.message_id,
                                text=f"‚è≥ mint nft 6/8")

    pandra_core_minter = Minter(private_key, 'core', 'Pandra')
    is_pandra_core_mint = pandra_core_minter.mint()
    if is_pandra_core_mint == -2:
        is_pandra_core_mint = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–∞–∑–∞"
    elif is_pandra_core_mint == -6:
        is_pandra_core_mint = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    await asyncio.sleep(5)
    await bot.edit_message_text(chat_id=wait_1_message.chat.id,
                                message_id=wait_1_message.message_id,
                                text=f"‚è≥ mint nft 7/8")

    pandra_celo_minter = Minter(private_key, 'celo', 'Pandra')
    is_pandra_celo_mint = pandra_celo_minter.mint()
    if is_pandra_celo_mint == -2:
        is_pandra_celo_mint = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–∞–∑–∞"
    elif is_pandra_celo_mint == -6:
        is_pandra_celo_mint = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    await asyncio.sleep(5)
    await bot.edit_message_text(chat_id=wait_1_message.chat.id,
                                message_id=wait_1_message.message_id,
                                text=f"‚è≥ mint nft 8/8. –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ ")

    buttons = [
        KeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"),
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard=[buttons],
                                       resize_keyboard=True)
    await UserFollowing.claim_all.set()
    await message.answer("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> \n\n"
                         "<u> 1. –ú–∏–Ω—Ç nft </u> \n"
                         f"  üîò <i> Greenfield Testnet </i> {is_gr_mint} \n"
                         f"  üîò <i> ZkLightClient </i> {is_zklight_mint} \n"
                         f"  üîò <i> ZkBridge on opBNB </i> {is_opbnb_mint} \n"
                         f"  üîò <i> Mainnet Alpha </i> {is_main_mint} \n"
                         f"  üîò <i> Pandra on BSC</i> {is_pandra_bnb_mint} \n\n"
                         f"  üîò <i> Pandra on Polygon</i> {is_pandra_pol_mint} \n\n"
                         f"  üîò <i> Pandra on Core</i> {is_pandra_core_mint} \n\n"
                         f"  üîò <i> Pandra on Celo</i> {is_pandra_celo_mint} \n\n"
                         "<u> 2. –ö—Ä–æ—Å—Å—á–µ–π–Ω nft —Å–µ–Ω–¥–µ—Ä (Blockchain:Transaction Hash)</u> \n"
                         f'  üîò <i> ZkLightClient nft </i> {} \n'
                         f'  üîò <i> ZkBridge on opBNB nft </i> {} \n'
                         f'  üîò <i> Mainnet Alpha nft </i> {} \n'
                         f'  üîò <i> CodeConqueror (Pandra) nft </i> {} \n'
                         f'  üîò <i> PixelProwler (Pandra) nft </i> {} \n'
                         f'  üîò <i> MelodyMaven (Pandra) nft </i> {} \n'
                         f'  üîò <i> EcoGuardian (Pandra) nft </i> {} \n\n'
                         '<u> 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (zkMessenger): </u> \n'
                         f'  üîò <i> –∏–∑ BSC –≤ Polygon </i> {is_sending} \n\n',
                         parse_mode=types.ParseMode.MARKDOWN,
                         reply_markup=reply_markup)
