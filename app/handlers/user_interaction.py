from aiogram import types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from app.create_bot import dp, bot
from app.states import UserFollowing


@dp.message_handler(commands=['restart'], state='*')
async def restart_cmd(message: types.Message):
    await start_cmd(message)


@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    buttons = [
        KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å"),
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    await UserFollowing.start_navigation.set()
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ <b>Polyhedra Automatization</b> ! ü§ñüëã \n\n"
                         "üìç –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å <a href='https://t.me/trioinweb3/13'>–≥–∞–π–¥–æ–º</a> üìç\n\n"
                         "–ë–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ–Ω—Ç:\n"
                         "<u> 1. –ú–∏–Ω—Ç nft: </u> \n"
                         "  üîò <i> Greenfield Testnet </i> (–Ω–∞ BNB Chain) \n"
                         "  üîò <i> ZkLightClient </i> (–Ω–∞ BNB Chain) \n"
                         "  üîò <i> ZkBridge on opBNB </i> (–Ω–∞ BNB Chain) \n"
                         "  üîò <i> Mainnet Alpha </i> (–Ω–∞ Core) \n"
                         "  üîò <i> Pandra </i> (–Ω–∞ BNB Chain, Polygon, Core, Celo) \n\n"
                         "<u> 2. –ö—Ä–æ—Å—Å—á–µ–π–Ω nft —Å–µ–Ω–¥–µ—Ä (zknft): </u> \n"
                         '  üîò <i> ZkLightClient nft </i> –∏–∑ BSC –≤ opBNB \n'
                         '  üîò <i> ZkBridge on opBNB nft </i> –∏–∑ BSC –≤ opBNB \n'
                         '  üîò <i> Mainnet Alpha nft </i> –∏–∑ Core –≤ Polygon \n'
                         '  üîò <i> CodeConqueror (Pandra) nft </i> –∏–∑ BSC –≤ Core \n'
                         '  üîò <i> PixelProwler (Pandra) nft </i> –∏–∑ Polygon –≤ BSC \n'
                         '  üîò <i> MelodyMaven (Pandra) nft </i> –∏–∑ Core –≤ Polygon \n'
                         '  üîò <i> EcoGuardian (Pandra) nft </i> –∏–∑ Celo –≤ BSC \n\n'
                         '<u> 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (zkMessenger): </u> \n'
                         '  üîò <i> –∏–∑ BSC –≤ Polygon </i> \n\n'
                         ''
                         '<u>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞ </u> \n'
                         ' BNB = <i>0.02065</i> \n'
                         ' Matic = <i>3.1</i> \n'
                         ' Core = <i>2.5</i> \n'
                         ' Celo = <i>5</i>',
                         parse_mode=types.ParseMode.HTML,
                         reply_markup=reply_markup)


@dp.message_handler(Text(equals="üöÄ –ù–∞—á–∞—Ç—å"), state=UserFollowing.start_navigation)
async def request_private_key(message: types.Message):
    await UserFollowing.send_API.set()
    await message.answer("üëù *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π private key* \n\n"
                         "_–ë–æ—Ç –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∫–ª—é—á–∏. "
                         "–ü—Ä–æ–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç—ã–º –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º, –∏ –µ–≥–æ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ (Open Source) –¥–æ—Å—Ç—É–ø–µ–Ω "
                         "–¥–ª—è –≤—Å–µ—Ö. \n "
                         "GitHub: https://github.com/realgeneral/telegram-bot-polyhedra_",
                         parse_mode=types.ParseMode.MARKDOWN,
                         reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=UserFollowing.send_API)
async def request_API(message: types.Message, state: FSMContext):
    wait_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é private key...", reply_markup=ReplyKeyboardRemove())
    private_key = message.text.strip()
    await state.update_data(private_key=private_key)
    await bot.delete_message(chat_id=wait_message.chat.id,
                             message_id=wait_message.message_id)
    await UserFollowing.get_api_keys.set()
    await message.answer("üëù <b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ API key –æ—Ç moralis</b> \n\n"
                         "<i><a href='https://docs.moralis.io/web3-data-api/evm/get-your-api-key'>–ó–¥–µ—Å—å</a> "
                         "—Ç—É—Ç–æ—Ä–∏–∞–ª –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á</i>",
                         parse_mode=types.ParseMode.HTML,
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=UserFollowing.get_api_keys)
async def private_keys(message: types.Message, state: FSMContext):
    api_key = message.text.strip()
    await state.update_data(api_key=api_key)

    buttons = [
        KeyboardButton(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"),
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard=[buttons],
                                       resize_keyboard=True)

    await UserFollowing.wallet_menu.set()
    await message.answer("üòå *–ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã*",
                         parse_mode=types.ParseMode.MARKDOWN,
                         reply_markup=reply_markup)



